<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置Service对象-->
    <bean id="accountService" class="com.service.impl.AccountServiceImpl"/>

    <!--基于xml的aop配置
       1.把通知bean也交给spring来处理
       2.使用aop : config标签表名开始aop的配置
       3.使用aop:aspect标签表名配置切面
                id:给切面提供一个唯一标识
                ref:是指定通知类bean的id
       4.在aop：aspect 标签的内部使用对应标签来配置通知的类型
            假如你想让某个示例方法在切入点方法执行之前执行，要用到
                aop:before ,表示配置前置通知
                  method:用于指定logger中哪个方法是前置通知
                  pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
    -->
    <!--切入点表达式的写法
       访问修饰符可以省略
       返回值可以用*代替，
       包名可以使用*.代替，*..可以代替任意包
       类名和方法名都可以用*来代替
       参数列表：
          可以直接写数据类型
             基本类型直接写名称  int
             引用类型用包名.类名来代替
             .. 表示有无参数均可

       全通配写法：
          * *..*.*(..)

    -->
    <!--把通知bean也交给spring处理-->
    <bean id="logger" class="com.utils.Logger" />

    <!--配置aop-->

    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
            <aop:before method="printLog" pointcut="execution(public void com.service.impl.AccountServiceImpl.addAccount())"></aop:before>
        </aop:aspect>
    </aop:config>




    

</beans>